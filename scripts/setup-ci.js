#!/usr/bin/env node

/**
 * Script de configura√ß√£o para CI/CD
 * Configura depend√™ncias e valida a estrutura do projeto para os workflows do GitHub Actions
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFile(filePath, description) {
  if (fs.existsSync(filePath)) {
    log(`‚úÖ ${description}`, 'green');
    return true;
  } else {
    log(`‚ùå ${description}`, 'red');
    return false;
  }
}

function checkPackageScripts(packagePath, requiredScripts) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const scripts = packageJson.scripts || {};
    
    let allPresent = true;
    requiredScripts.forEach(script => {
      if (scripts[script]) {
        log(`  ‚úÖ Script '${script}' encontrado`, 'green');
      } else {
        log(`  ‚ùå Script '${script}' n√£o encontrado`, 'red');
        allPresent = false;
      }
    });
    
    return allPresent;
  } catch (error) {
    log(`‚ùå Erro ao ler ${packagePath}: ${error.message}`, 'red');
    return false;
  }
}

function runCommand(command, description) {
  try {
    log(`üîÑ ${description}...`, 'blue');
    execSync(command, { stdio: 'inherit' });
    log(`‚úÖ ${description} conclu√≠do`, 'green');
    return true;
  } catch (error) {
    log(`‚ùå Erro em ${description}: ${error.message}`, 'red');
    return false;
  }
}

function main() {
  log('üöÄ Configurando CI/CD para FinManage', 'cyan');
  log('=====================================', 'cyan');
  
  // Verificar estrutura do projeto
  log('\nüìÅ Verificando estrutura do projeto...', 'yellow');
  
  const requiredFiles = [
    { path: 'package.json', desc: 'package.json raiz' },
    { path: 'packages/core/package.json', desc: 'package.json do core' },
    { path: 'packages/product-personal/package.json', desc: 'package.json do product-personal' },
    { path: 'packages/product-diarista/package.json', desc: 'package.json do product-diarista' },
    { path: 'packages/product-mei/package.json', desc: 'package.json do product-mei' },
    { path: '.github/workflows/ci.yml', desc: 'Workflow CI' },
    { path: '.github/workflows/test-coverage.yml', desc: 'Workflow de cobertura' },
    { path: '.github/workflows/nightly-tests.yml', desc: 'Workflow de testes noturnos' },
    { path: '.github/workflows/pr-validation.yml', desc: 'Workflow de valida√ß√£o de PR' }
  ];
  
  let structureValid = true;
  requiredFiles.forEach(file => {
    if (!checkFile(file.path, file.desc)) {
      structureValid = false;
    }
  });
  
  if (!structureValid) {
    log('\n‚ùå Estrutura do projeto incompleta. Verifique os arquivos em falta.', 'red');
    process.exit(1);
  }
  
  // Verificar scripts necess√°rios
  log('\nüìã Verificando scripts necess√°rios...', 'yellow');
  
  const requiredScripts = ['test', 'test:unit', 'test:integration', 'build', 'lint'];
  
  const packages = [
    { path: 'packages/core/package.json', name: 'Core' },
    { path: 'packages/product-personal/package.json', name: 'Product Personal' },
    { path: 'packages/product-diarista/package.json', name: 'Product Diarista' },
    { path: 'packages/product-mei/package.json', name: 'Product MEI' }
  ];
  
  let scriptsValid = true;
  packages.forEach(pkg => {
    log(`\nüîç Verificando ${pkg.name}:`, 'blue');
    if (!checkPackageScripts(pkg.path, requiredScripts)) {
      scriptsValid = false;
    }
  });
  
  if (!scriptsValid) {
    log('\n‚ö†Ô∏è Alguns scripts necess√°rios est√£o em falta. Os workflows podem falhar.', 'yellow');
  }
  
  // Verificar depend√™ncias de desenvolvimento
  log('\nüîß Verificando depend√™ncias de desenvolvimento...', 'yellow');
  
  const devDependencies = ['vitest', '@vitest/coverage-v8', 'eslint'];
  let depsValid = true;
  
  packages.forEach(pkg => {
    try {
      const packageJson = JSON.parse(fs.readFileSync(pkg.path, 'utf8'));
      const devDeps = packageJson.devDependencies || {};
      
      log(`\nüîç Verificando depend√™ncias de ${pkg.name}:`, 'blue');
      devDependencies.forEach(dep => {
        if (devDeps[dep]) {
          log(`  ‚úÖ ${dep} encontrado`, 'green');
        } else {
          log(`  ‚ö†Ô∏è ${dep} n√£o encontrado`, 'yellow');
        }
      });
    } catch (error) {
      log(`‚ùå Erro ao verificar depend√™ncias de ${pkg.name}`, 'red');
      depsValid = false;
    }
  });
  
  // Executar instala√ß√£o e testes
  log('\nüîÑ Executando verifica√ß√µes finais...', 'yellow');
  
  const commands = [
    { cmd: 'npm run install:all', desc: 'Instala√ß√£o de depend√™ncias' },
    { cmd: 'npm run build:core', desc: 'Build do core' },
    { cmd: 'npm run lint:all', desc: 'Linting de todos os packages' }
  ];
  
  let commandsSuccessful = true;
  commands.forEach(command => {
    if (!runCommand(command.cmd, command.desc)) {
      commandsSuccessful = false;
    }
  });
  
  // Executar testes (opcional, pode ser demorado)
  const runTests = process.argv.includes('--with-tests');
  if (runTests) {
    log('\nüß™ Executando testes...', 'yellow');
    runCommand('npm run test:all', 'Execu√ß√£o de todos os testes');
  }
  
  // Resumo final
  log('\nüìä Resumo da Configura√ß√£o', 'cyan');
  log('==========================', 'cyan');
  
  log(`Estrutura do projeto: ${structureValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`, structureValid ? 'green' : 'red');
  log(`Scripts necess√°rios: ${scriptsValid ? '‚úÖ Completos' : '‚ö†Ô∏è Incompletos'}`, scriptsValid ? 'green' : 'yellow');
  log(`Depend√™ncias: ${depsValid ? '‚úÖ Verificadas' : '‚ö†Ô∏è Verificar manualmente'}`, depsValid ? 'green' : 'yellow');
  log(`Comandos CI: ${commandsSuccessful ? '‚úÖ Funcionando' : '‚ùå Com problemas'}`, commandsSuccessful ? 'green' : 'red');
  
  if (structureValid && commandsSuccessful) {
    log('\nüéâ Configura√ß√£o do CI/CD conclu√≠da com sucesso!', 'green');
    log('\nüìù Pr√≥ximos passos:', 'blue');
    log('1. Fa√ßa commit dos workflows criados', 'blue');
    log('2. Configure secrets no GitHub (se necess√°rio)', 'blue');
    log('3. Substitua SEU_USUARIO nos badges por seu username', 'blue');
    log('4. Adicione badges ao README.md principal', 'blue');
    log('5. Fa√ßa push para ativar os workflows', 'blue');
  } else {
    log('\n‚ö†Ô∏è Configura√ß√£o conclu√≠da com avisos. Verifique os problemas acima.', 'yellow');
  }
  
  if (!runTests) {
    log('\nüí° Dica: Execute com --with-tests para incluir execu√ß√£o de testes', 'cyan');
  }
}

if (require.main === module) {
  main();
}

module.exports = { main, checkFile, checkPackageScripts, runCommand };